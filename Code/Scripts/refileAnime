#!/bin/bash


filenameToJSON(){
    echo "$1" \
        | perl -pe 's/[[(](.*?)[\])][[:space:]]*(.*?)(?: S([0-9]+))? - (?:S([0-9]+)E)?([0-9]+)(?:v[1-9]+)? ([[(]([0-9]+p)[\])])?[[:space:]]?(?:[[(](.*)[\])])?[.](.*)/{ "release": "\1","title": "\2","season": "\3\4","episode": "\5","quality": "\7","extra": "\8","format": "\9"}/g'
}

fixedFilenameToJSON(){
    local json="$(filenameToJSON "$1")"
    local season="$(printf "%02d" "$(echo "$json" | jq 'try (.season | tonumber) catch 1')")"
    echo "$json" | jq ".season |= \"$season\""
}

listAnimeFull(){
    find "$HOME/Downloads" -iname "*.mkv" | grep -F "$1"
}

json(){
    echo "{\"filename\": \"$(listAnimeFull "$1")\", \"data\": $(fixedFilenameToJSON "$1")}"
}

listAnime(){
    find "$HOME/Downloads" -iname "*.mkv" -printf "%P\n"
}


json-stream(){
    while read -r file
    do
        json "$file"
    done
}

genReplacements(){
    listAnime | json-stream | jq '{"old" : .filename, "new": "'"$HOME"'/Anime/\(.data.title)/Season \(.data.season)/Episode \(.data.episode).\(.data.format)"}'
}


#echo "[SubsPlease] Test - 6 [1080p][TEST].mkv" | json-stream

genReplacements \
    | jq '"smv \"\(.old)\" \"\(.new)\""' \
    | sed -E 's/^"(.*)"$/\1/;s/\\"/"/g' \
    | sh
