#!/bin/bash

KALTEMPLATE_VERSION="0.1"

HIGHLIGHT_TABWIDTH=2
HIGHLIGHT_STYLE='pablo'
HIGHLIGHT_FORMAT='ansi'
if [ "$( tput colors )" -ge 256 ]; then
    HIGHLIGHT_FORMAT='xterm256'
fi

"$(echo $0 | rev | cut -d/ -f2- | rev)/scope"

echoCentered(){
    local str="$1"
    local row="$2"
    local width="$(tput cols)"
    local strlen=${#str}
    tput cup $row "$(((width / 2) - (strlen / 2)))"
    echo -n "$3"
    echo -n "$str"
    echo "$4"
}

configdir(){
    local configdir="$XDG_CONFIG_HOME/kaltemplate"
    [ -z "$XDG_CONFIG_HOME" ] && configdir="$HOME/.kaltemplate"
    echo "$configdir"
}

prepareConfig(){
    mkdir -p "$(configdir)"
}

mkTemplate(){
    local name="$1"
    local path="$2"
    #TODO: Have multiple ways to generate scopes
    mkdir -p "$(configdir)/templates/$name/$(uname -n)"
    mkdir -p "$(configdir)/templates/$name/disabled"
    mkdir -p "$(configdir)/templates/$name/global"
    echo -e "$path" > "$(configdir)/templates/$name/.template"
}

highlightFile(){
    local file="$1"
    highlight --replace-tabs="${HIGHLIGHT_TABWIDTH}" \
                      --out-format="${HIGHLIGHT_FORMAT}" \
                      --style="${HIGHLIGHT_STYLE}" --force -- "$file"
}

listTemplates(){
    tree "$(configdir)/templates" | sed -E "s|$(configdir)/templates|Templates|;/^[0-9]+ directories/d;/^$/d;s/(.*)\.unit/\1/g"
}

viewCompiled(){
    template="$1"
    highlightFile "$(configdir)/templates/$template/.kalc" | less
}

collectScopes(){
    echo "Looking for available scopes..." 1>&2
    n=0
    for i in "$(configdir)/scopes/"*
    do
        scope="$($i)"
        echo "  Found scope '$scope' of type '$(echo $i | rev | cut -d/ -f1 | rev)'" 1>&2
        echo "$scope"
        n=$(( ++n ))
    done
    echo "Found $n scopes." 1>&2
}

collectUnits(){
    template="$1"
    shift
    for i in $@
    do
        [ -d "$template/$i" ] && find "$template/$i" -type f -regex ".*.unit"
    done | sort --key="9" --field-separator='/'
}

formatUnit(){
    m4 ~/Code/Projects/kaltemplate/predef.m4 ~/Code/Projects/kaltemplate/env.m4 "$1"
}

collectTemplates(){
    ~/Code/Projects/kaltemplate/env-to-m4 
    
    scopes=( $(collectScopes) )

    echo "Collecting templates..."
    templates=($(find $(configdir)/templates -mindepth 1 -maxdepth 1 -type d))
    templateCount=${#templates[@]}
    m=0
    for template in "${templates[@]}"
    do
        m=$(( ++m ))
        echo "Collecting '$(echo "$template" | rev | cut -d/ -f1 | rev)' [$m/$templateCount]"
        echo "  Collecting units..."
        units=( $(collectUnits "$template" "${scopes[@]}") )
        unitCount=${#units[@]}
        echo -n > "$template/.kalc"
        n=0
        for unit in "${units[@]}"
        do
            n=$(( ++n ))
            echo "    Collecting '$(echo "$unit" | sed "s|$(configdir)/templates/||g;s/\.unit//g;s|/|.|g")' [$n/$unitCount]"
            formatUnit "$unit" >> "$template/.kalc"
            #cat "$unit" >> "$template/.kalc"
            echo >> "$template/.kalc"
        done
    done
}

collectTemplate(){
    local template="$1"
    local suppressComments="$2"

    scopes=( $(collectScopes) )
    files=( $(collectUnits "$(configdir)/templates/$template" "${scopes[@]}") )

    [ -z "$suppressComments" ] && {

        echo "# Generated by kaltemplate '$KALTEMPLATE_VERSION' on $(date)"
        echo "# Expansion of template '$template'"
        echo

        for file in "${files[@]}"
        do
            echo "########### From '$file' ##########"
            cat "$file"
            echo -e "\n###################################\n"
        done

    } || {
        for file in "${files[@]}"
        do
            cat "$file"
            echo -e "\n"
        done
    }
}

viewTemplate(){
    local template="$1"

    [ -z "$PAGER" ] && PAGER=less

    [ -d "$XDG_CACHE_HOME/kaltemplate" ] || mkdir -p "$XDG_CACHE_HOME/kaltemplate"

    collectTemplate "$template" > "$XDG_CACHE_HOME/kaltemplate/tmp.template"

    $PAGER "$XDG_CACHE_HOME/kaltemplate/tmp.template"
}

dereferenceUnit(){
    local unit="$1"
    local createFile="$2"

    local template=$(echo "$unit" | cut -d. -f1)
    local scope=$(echo "$unit" | cut -d. -f2)
    local unitFile=$(echo "$unit" | cut -d. -f3)

    [ -z "$unitFile" ] && {
        unitFile="$scope"
        scope="global"
    }

    [ -d "$(configdir)/templates/$template" ] || {
        echo -e "Cannot dereference unit '$unit'.\nTemplate '$template' doesn't exist."
        createTemplate
        return 1
    }

    [ -d "$(configdir)/templates/$template/$scope" ] || {
        echo -e "Cannot dereference unit '$unit'.\nTemplate '$template' doesn't have scope '$scope'."
        mkdir "$(configdir)/templates/$template/$scope"
        return 2
    }

    [ -f "$(configdir)/templates/$template/$scope/$unitFile.unit" ] ||  {

        [ -z "$createFile" ] && {
            echo -e "Cannot dereference unit '$unit'.\n\
Template '$template' doesn't have unitfile '$unitFile' in scope '$scope'."
            return 3
        } || {
            touch "$(configdir)/templates/$template/$scope/$unitFile.unit"
        }
    }

    echo "$(configdir)/templates/$template/$scope/$unitFile.unit"
}

viewUnit(){
    local unit="$1"

    [ -z "$PAGER" ] && PAGER=less

    if unitPath="$(dereferenceUnit "$1")"
    then
        $PAGER "$unitPath"
    else
        echo "$unitPath"
        echo "Failed to view unit '$unit'"
    fi
}

editUnit(){
    local unit="$1"
    if unitPath="$(dereferenceUnit "$1" true)"
    then
        $EDITOR "$unitPath"
    else
        echo "$unitPath"
        echo "Failed to edit unit '$unit'"
    fi
}

release(){
    tput rmcup
    echo "Cancelling operation..."
    exit 1
}

trap release SIGINT

createTemplate(){

    local width="$(tput cols)"
    local height="$(tput lines)"



    # Store screen contents
    tput smcup
    tput clear
    echoCentered "kaltemplate version $KALTEMPLATE_VERSION" 1
    echoCentered "Create Template" 2
    tput cup $((height/3)) 0
    tput dl1
    echo -n "Name: "
    read -r name

    while [ -d "$(configdir)/templates/$name" ]
    do

        echoCentered "Template $name already exists." 0 "$(tput setaf 1)" "$(tput sgr0)"

        tput cup $((height/3)) 0
        tput dl1
        echo -n "Name: "
        read -r name
    done


    tput cup 0 0
    tput el


    echoCentered "Name: $name" 5
    tput cup $((height/3)) 0
    tput dl1
    echo -n "Deploy to: "
    read -r path
    echoCentered "Deploy to: $path" 6
    local response=""
    tput cup $((height/3)) 0
    tput dl1
    echo -n "Is this correct? [y/n]: "
    while [ -z "$response" ]
    do
        read -r response
        case "$response" in
            y|Y)
                mkTemplate "$name" "$path"
            ;;
            n|N)
                tput rmcup
                echo "Template creation cancelled."
                exit 2
            ;;
            *)
                tput cup $((height/3)) 0
                tput dl1
                echo -n "Answer with y/n: "
                response=""
                ;;
        esac
    done
    tput rmcup
}

linkTemplates(){
    collectTemplates
    while read -r template;
    do
        echo "Linking '$(basename "$template")'"
        local path="$(cat "$template/.template" | sed "s|~|$HOME|g")"
        local directory="$(dirname "$path")"
        mkdir -p "$directory":
        echo "  Deploying to '$path'"

        [ -f "$path" ] && {
            rm "$path"
        }

        ln -s "$template/.kalc" "$path"
    done < <(find "$(configdir)/templates" -mindepth 1 -maxdepth 1 -type d)
}

while [ -n "$1" ]
do
    case "$1" in
        new)
            createTemplate
            shift
            ;;
        edit)
            shift
            editUnit "$1"
            shift
            ;;
        viewUnit)
            shift
            viewUnit "$1"
            shift
            ;;
        list)
            listTemplates
            shift
            ;;
        collect)
            collectTemplates
            shift
            ;;
        link)
            linkTemplates
            shift
            ;;
        viewTemplate)
            shift
            viewTemplate "$1"
            shift
            ;;
        view)
            shift
            viewCompiled "$1"
            shift
            ;;
        *)
            echo "Unrecognized command-line argument: $1"
            exit 1
            ;;
    esac
done
